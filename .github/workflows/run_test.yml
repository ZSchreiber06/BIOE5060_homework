name: test_all_units              # name of the action to be shown in the log
on:                               # on what condition to trigger this action
  push:                           # trigger when push changes
    branches:
      - main
    tags:
      - '*'
  pull_request:                   # trigger when accepting pull requests
    branches:
      - main

jobs:                             # workflows are made of parallel jobs running on virtual machines
  unit_2-5:                       # job 1: build and test the code; you can have additional jobs to upload/deploy
    name: Build/test unit_2-5     # name of job 1
    strategy:
      matrix:                     # build and test on 4 OSes provided by github
        os: [ubuntu-22.04, macos-12, macos-14, windows-2019]
    runs-on: ${{ matrix.os }}
    defaults:                     # forcing each OS to use bash as default
      run:
        shell: bash
    steps:                        # each job is made of steps
      - name: Checkout repo       # each step has a name, and a bunch of commands
        uses: actions/checkout@v3
        with:
          submodules: 'recursive'
      - name: Install dependencies (Linux only)
        if: ${{ runner.os == 'Linux' }}   # use these variables to limit a step only on a specific OS
        run: |
          sudo apt-get update && sudo apt-get install -y gcc
      - name: Install dependencies (MacOS only)
        if: ${{ runner.os == 'macOS' }}
        run: |
          brew install gcc@12
      - name: Setting up C compiler CC (Windows only) # specifically set CC for Windows, as Windows default does not set cc to gcc
        if: ${{ runner.os == 'Windows' }}
        run: |
          echo 'CC=gcc' >> $GITHUB_ENV   # using this to change/add environment variables, here we set C compiler on windows as gcc
      - name: Build program (debug mode) # build software
        run: |
          cd unit2_5
          make clean
          #make all    ## uncomment this line also works if the windows-only step for CC setting is added
          if [ "$RUNNER_OS" == "Windows" ]; then  # you can also use shell env variable to test OS/version in the run-script
            make all CC=gcc
          else
            make all
          fi
      - name: Test program (non Windows) # run tests
        if: ${{ runner.os != 'Windows' }}
        run: |
          cd unit2_5
          make test
      - name: Test program (Windows only)
        if: ${{ runner.os == 'Windows' }}
        run: |
          cd unit2_5
          make test CC=gcc
      - name: Build program in release mode   # you can rebuild the programs in other options, or compilers and further test
        run: |
          cd unit2_5
          make clean
          if [ "$RUNNER_OS" == "Windows" ]; then
            make release CC=gcc
          else
            make release
          fi
      - name: Create package folder  # once compiled, you can create a release package and upload to github or your own server
        run: |
          mkdir -p packages
          cp unit2_5/ispalindromestr packages
      - name: Create release tag     # create packages for different OSes
        run: perl -e "print 'RELEASE_TAG='. lc('${{ runner.os }}-${{ runner.arch }}-github-latest')" >> $GITHUB_ENV
      - name: Zip package
        run: |
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            7z a -tzip packages/palindrome-${{ env.RELEASE_TAG }}.zip packages/ispalindromestr.exe
          else
            zip -FSr --symlink packages/palindrome-${{ env.RELEASE_TAG }}.zip packages/ispalindromestr
          fi
      - name: Upload package
        if: ${{ matrix.os == 'ubuntu-22.04' || matrix.os == 'macos-12' || matrix.os == 'windows-2019' }}
        uses: actions/upload-artifact@v3
        with:
          name: all-unit-packages
          path: packages/palindrome-${{ env.RELEASE_TAG }}.zip
